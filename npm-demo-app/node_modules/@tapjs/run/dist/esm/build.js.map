{"version":3,"file":"build.js","sourceRoot":"","sources":["../../src/build.ts"],"names":[],"mappings":"AACA,OAAO,EAAE,eAAe,EAAE,MAAM,kBAAkB,CAAA;AAClD,OAAO,EAAE,aAAa,EAAE,MAAM,aAAa,CAAA;AAC3C,OAAO,EAAE,WAAW,EAAE,MAAM,kBAAkB,CAAA;AAC9C,MAAM,OAAO,GAAG,aAAa,CAAC,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,CAAA;AAC9C,MAAM,KAAK,GAAG,OAAO,CAAC,OAAO,CAAC,8BAA8B,CAAC,CAAA;AAC7D,MAAM,QAAQ,GAAG;IACf,sBAAsB;IACtB,eAAe;CAChB,CAAA;AACD,MAAM,IAAI,GAAG,OAAO,CAAC,QAAQ,CAAA;AAE7B,MAAM,CAAC,MAAM,KAAK,GAAG,KAAK,EAAE,IAAc,EAAE,MAAoB,EAAE,EAAE;IAClE,IAAI,IAAI,CAAC,MAAM,KAAK,CAAC,EAAE;QACrB,MAAM,IAAI,SAAS,CACjB,kDAAkD,CACnD,CAAA;KACF;IAED,MAAM,IAAI,GAAG,CAAC,GAAG,QAAQ,EAAE,KAAK,EAAE,GAAG,MAAM,CAAC,UAAU,CAAC,CAAA;IACvD,OAAO,IAAI,OAAO,CAAO,CAAC,GAAG,EAAE,GAAG,EAAE,EAAE;QACpC,eAAe,CAAC,IAAI,EAAE,IAAI,EAAE,EAAE,EAAE,CAAC,IAAI,EAAE,MAAM,EAAE,EAAE;YAC/C,8DAA8D;YAC9D,0DAA0D;YAC1D,IAAI,WAAW,KAAK,OAAO,EAAE;gBAC3B,GAAG,EAAE,CAAA;gBACL,OAAM;aACP;YACD,IAAI,IAAI,IAAI,MAAM,EAAE;gBAClB,GAAG,CACD,MAAM,CAAC,MAAM,CAAC,IAAI,KAAK,CAAC,cAAc,CAAC,EAAE;oBACvC,IAAI;oBACJ,MAAM;iBACP,CAAC,CACH,CAAA;aACF;iBAAM;gBACL,GAAG,EAAE,CAAA;aACN;YACD,OAAO,KAAK,CAAA;QACd,CAAC,CAAC,CAAA;IACJ,CAAC,CAAC,CAAA;AACJ,CAAC,CAAA","sourcesContent":["import type { LoadedConfig } from '@tapjs/config'\nimport { foregroundChild } from 'foreground-child'\nimport { createRequire } from 'node:module'\nimport { mainCommand } from './main-config.js'\nconst require = createRequire(import.meta.url)\nconst tmbin = require.resolve('.bin/generate-tap-test-class')\nconst execArgs = [\n  '--loader=ts-node/esm',\n  '--no-warnings',\n]\nconst node = process.execPath\n\nexport const build = async (args: string[], config: LoadedConfig) => {\n  if (args.length !== 0) {\n    throw new TypeError(\n      'build command does not take positional arguments'\n    )\n  }\n\n  const argv = [...execArgs, tmbin, ...config.pluginList]\n  return new Promise<void>((res, rej) => {\n    foregroundChild(node, argv, {}, (code, signal) => {\n      // if this is the main command, just terminate in the same way\n      // otherwise, let the promise communicate the build status\n      if (mainCommand === 'build') {\n        res()\n        return\n      }\n      if (code || signal) {\n        rej(\n          Object.assign(new Error('build failed'), {\n            code,\n            signal,\n          })\n        )\n      } else {\n        res()\n      }\n      return false\n    })\n  })\n}\n"]}