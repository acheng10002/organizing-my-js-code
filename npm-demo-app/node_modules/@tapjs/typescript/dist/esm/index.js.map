{"version":3,"file":"index.js","sourceRoot":"","sources":["../../src/index.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,GAAG,EAAa,MAAM,aAAa,CAAA;AAC5C,OAAO,EAAE,OAAO,EAAE,MAAM,WAAW,CAAA;AAEnC,wCAAwC;AACxC,MAAM,CAAC,MAAM,MAAM,GAAG,aAAa,CAAA;AAEnC,kDAAkD;AAClD,+CAA+C;AAE/C,mEAAmE;AACnE,+CAA+C;AAC/C,MAAM,CAAC,MAAM,OAAO,GAAG,IAAI,CAAA;AAE3B,IAAI,MAAM,GAAG,KAAK,CAAA;AAClB,MAAM,CAAC,MAAM,MAAM,GAAkB,GAAG,EAAE;IACxC,IAAI,CAAC,MAAM,EAAE;QACX,IAAI,GAAG,CAAC,aAAa,KAAK,GAAG,EAAE;YAC7B,GAAG,CAAC,sBAAsB,GAAG,GAAG,CAAA;SACjC;aAAM;YACL,GAAG,CAAC,sBAAsB,GAAG,GAAG,CAAA;SACjC;QACD,IAAI,GAAG,CAAC,YAAY,IAAI,GAAG,CAAC,OAAO,EAAE;YACnC,GAAG,CAAC,eAAe,GAAG,OAAO,CAAC,GAAG,CAAC,OAAO,EAAE,GAAG,CAAC,YAAY,CAAC,CAAA;SAC7D;QACD,MAAM,GAAG,IAAI,CAAA;KACd;IACD,OAAO,EAAE,CAAA;AACX,CAAC,CAAA;AAED;;GAEG;AACH,MAAM,CAAC,MAAM,kBAAkB,GAAG,CAAC,IAAI,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,CAAC,CAAA;AAEpE;;;;GAIG;AACH,MAAM,CAAC,MAAM,MAAM,GAAG;IACpB;;;;;;;;;;;;;;;;;;;;;OAqBG;IACH,SAAS,EAAE;QACT,IAAI,EAAE,SAAS;QACf,WAAW,EAAE;;;;;;;;;;;;;;;;;;;KAmBZ;KACF;IAED;;;;;;;;;OASG;IACH,QAAQ,EAAE;QACR,IAAI,EAAE,QAAQ;QACd,WAAW,EAAE;;;;;;;sDAOqC;KACnD;CACF,CAAA","sourcesContent":["import { env, TapPlugin } from '@tapjs/core'\nimport { resolve } from 'node:path'\n\n// This just adds the ts-node/esm loader\nexport const loader = 'ts-node/esm'\n\n// https://github.com/TypeStrong/ts-node/pull/2009\n// export const importLoader = 'ts-node/import'\n\n// ts-node/esm should come AHEAD of other loaders in the args list,\n// otherwise any other resolve()'s won't be run\nexport const preload = true\n\nlet didSet = false\nexport const plugin: TapPlugin<{}> = () => {\n  if (!didSet) {\n    if (env.TAP_TYPECHECK === '1') {\n      env.TS_NODE_TRANSPILE_ONLY = '0'\n    } else {\n      env.TS_NODE_TRANSPILE_ONLY = '1'\n    }\n    if (env.TAP_TSCONFIG && env.TAP_CWD) {\n      env.TS_NODE_PROJECT = resolve(env.TAP_CWD, env.TAP_TSCONFIG)\n    }\n    didSet = true\n  }\n  return {}\n}\n\n/**\n * File types that this plugin adds support for\n */\nexport const testFileExtensions = ['ts', 'cts', 'mts', 'tsx', 'jsx']\n\n/**\n * Options added by this plugin\n *\n * @group Configuration\n */\nexport const config = {\n  /**\n   * flag\n   *\n   * Type-check test files, in addition to transpiling and running them.\n   *\n   * This defaults to false, even though type checking your tests is generally\n   * a good idea. Unfortunately, it is also often considerably slower, adding\n   * as much as 500-750ms to each test suite file, which can be painful if you\n   * have a lot of tests. In large project folders, the effect can be even more\n   * pronounced.\n   *\n   * It is a good idea to enable this in CI environments, where test speed is\n   * less of an ergonomic drawback.\n   *\n   * The `\"skipLibCheck\": true` option in tsconfig will also speed things up a\n   * bit, at the expense of some type safety.\n   *\n   * Note that even if you pre-compile your tests, they will still be subject\n   * to type checking if `\"allowJs\": true` is set in your tsconfig.\n   *\n   * @group Configuration\n   */\n  typecheck: {\n    type: 'boolean',\n    description: `Type-check test files, in addition to transpiling and running\n                  them.\n\n                  This defaults to false, even though type checking your tests\n                  is generally a good idea. Unfortunately, it is also often\n                  considerably slower, adding as much as 500-750ms to each test\n                  suite file, which can be painful if you have a lot of tests.\n                  In large project folders, the effect can be even more\n                  pronounced.\n\n                  It is a good idea to enable this in CI environments, where\n                  test speed is less of an ergonomic drawback.\n\n                  The \\`\"skipLibCheck\": true\"\\` option in tsconfig will also\n                  speed things up a bit, at the expense of some type safety.\n\n                  Note that even if you pre-compile your tests, they will still\n                  be subject to type checking if \\`\"allowJs\": true\\` is set in\n                  your tsconfig.\n    `,\n  },\n\n  /**\n   * Path to the `tsconfig.json` file containing project settings provided to\n   * ts-node when running tests.\n   *\n   * Similar to the `--project` option to ts-node. Sets the `TS_NODE_PROJECT`\n   * environment variable.\n   *\n   * If this is a relative directory, then it is resolved against the project\n   * root directory.\n   */\n  tsconfig: {\n    type: 'string',\n    description: `Path to the \\`tsconfig.json\\` file containing project\n                  settings provided to ts-node when running tests.\n\n                  Similar to the \\`--project\\` option to ts-node. Sets the\n                  \\`TS_NODE_PROJECT\\` environment variable.\n\n                  If this is a relative directory, then it is resolved\n                  against the project root directory.`,\n  },\n}\n"]}