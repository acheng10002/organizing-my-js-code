{"version":3,"file":"serialize.js","sourceRoot":"","sources":["../../src/serialize.ts"],"names":[],"mappings":";AAAA,8DAA8D;AAC9D,6BAA6B;;;AAG7B,sDAAyD;AAEzD,sCAAkC;AAClC,6CAA4C;AAC5C,2CAAqC;AACrC,2DAAqD;AACrD,yCAA2C;AAC3C,+CAAuC;AAEvC,IAAI,CAAC,WAAI,EAAE;IACT,MAAM,IAAI,KAAK,CAAC,gDAAgD,CAAC,CAAA;CAClE;AAED,MAAM,EAAE,MAAM,EAAE,GAAG,WAAI,CAAA;AAEhB,MAAM,SAAS,GAAG,CAAC,GAAQ,EAAQ,EAAE;IAC1C,IAAI,GAAG,CAAC,UAAU,EAAE;QAClB,MAAM,IAAI,KAAK,CAAC,iDAAiD,CAAC,CAAA;KACnE;IACD,GAAG,CAAC,QAAQ,EAAE,EAAE,CAAA;IAEhB,MAAM,OAAO,GAAG,IAAI,qBAAO,EAAU,CAAA;IACrC,MAAM,QAAQ,GAAG,IAAI,qBAAO,CAAmB,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC,CAAC,CAAA;IAE3D,MAAM,MAAM,GAAG,IAAI,kCAAmB,EAAE,CAAA;IACxC,SAAS;IACT,uCAAuC;IACvC,8CAA8C;IAC9C,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,CAAA;IAEnB,MAAM,OAAO,GAAG,IAAA,0BAAa,EAAC,MAAM,EAAE,QAAQ,CAAC,CAAA;IAE/C,gDAAgD;IAChD,qBAAqB;IACrB,IAAI,CAAC,WAAI,EAAE;QACT,MAAM,IAAI,KAAK,CAAC,gDAAgD,CAAC,CAAA;KAClE;IACD,oBAAoB;IACpB,IAAA,yBAAc,EAAC,MAAM,EAAE,WAAI,EAAE,QAAQ,CAAC,CAAA;IACtC,IAAA,yBAAc,EAAC,MAAM,EAAE,WAAI,EAAE,QAAQ,CAAC,CAAA;IAEtC,MAAM,KAAK,GAAG,IAAA,mBAAO,EAAC,OAAO,EAAE,QAAQ,EAAE,OAAO,CAAC,CAAA;IAEjD,MAAM,aAAa,GAAG,IAAA,mCAAe,EACnC,GAAG,EACH,MAAM,EACN,OAAO,EACP,QAAQ,CACT,CAAA;IAED,KAAK,CAAC,GAAG,CAAC,CAAA;IACV,GAAG,CAAC,EAAE,CAAC,UAAU,EAAE,GAAG,EAAE;QACtB,aAAa,CAAC,GAAG,CAAC,CAAA;QAClB,MAAM,CAAC,GAAG,EAAE,CAAA;IACd,CAAC,CAAC,CAAA;AACJ,CAAC,CAAA;AAxCY,QAAA,SAAS,aAwCrB","sourcesContent":["// Serialize the root TAP object, and output a node:test style\n// serialized message stream.\n\nimport { Base, TAP } from '@tapjs/core'\nimport { TestStreamSerialize } from '@tapjs/error-serdes'\n\nimport { proc } from '@tapjs/core'\nimport { commentMethod } from './comment.js'\nimport { onAddFn } from './on-add.js'\nimport { printMessagesFn } from './print-messages.js'\nimport { serializeStdio } from './stdio.js'\nimport { TestMap } from './test-map.js'\n\nif (!proc) {\n  throw new Error('Cannot serialize TAP stream, no process object')\n}\n\nconst { stdout } = proc\n\nexport const serialize = (tap: TAP): void => {\n  if (tap.registered) {\n    throw new Error('Cannot serialize TAP stream, already registered')\n  }\n  tap.register?.()\n\n  const subsMap = new TestMap<Base[]>()\n  const diagsMap = new TestMap<DiagnosticData[]>([[tap, []]])\n\n  const stream = new TestStreamSerialize()\n  // stream\n  //   .pipe(new TestStreamDeserialize())\n  //   .on('data', c => stdout.write(format(c)))\n  stream.pipe(stdout)\n\n  const comment = commentMethod(stream, diagsMap)\n\n  // unpossible, we already checked on module load\n  /* c8 ignore start */\n  if (!proc) {\n    throw new Error('Cannot serialize TAP stream, no process object')\n  }\n  /* c8 ignore stop */\n  serializeStdio(stream, proc, 'stderr')\n  serializeStdio(stream, proc, 'stdout')\n\n  const onAdd = onAddFn(comment, diagsMap, subsMap)\n\n  const printMessages = printMessagesFn(\n    tap,\n    stream,\n    subsMap,\n    diagsMap\n  )\n\n  onAdd(tap)\n  tap.on('complete', () => {\n    printMessages(tap)\n    stream.end()\n  })\n}\n"]}