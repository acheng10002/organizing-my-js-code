"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.testResults = void 0;
const stack_1 = require("@tapjs/stack");
const result_to_error_js_1 = require("./result-to-error.js");
const test_message_data_js_1 = require("./test-message-data.js");
const testResults = (t, subsMap) => {
    if (!t.parent)
        return;
    const results = t.results;
    const psubs = subsMap.get(t.parent);
    /* c8 ignore start */
    if (!psubs) {
        throw new Error('ending subtest when parent has no subtests');
    }
    const n = psubs.indexOf(t);
    const tn = n === -1 ? psubs.indexOf(t.t) : n;
    if (tn === -1) {
        throw new Error('subtest not found in parent subtests list');
    }
    /* c8 ignore stop */
    const testNumber = tn + 1;
    /* c8 ignore start */
    if (!results) {
        throw new Error('printing messages before results available');
    }
    /* c8 ignore stop */
    const subs = subsMap.get(t);
    const suite = !!subs?.length;
    const p = {
        ...(0, test_message_data_js_1.testMessageData)(t),
        details: {
            duration_ms: t.time,
        },
        testNumber,
    };
    if (results.ok && !!results.todo)
        p.todo = true;
    if ((results.plan.skipAll && results.plan.skipReason) ||
        (results.ok && !!results.skip)) {
        p.skip = true;
    }
    if (suite)
        p.details.type = 'suite';
    if (results.ok)
        return p;
    if (suite) {
        const nf = subs.filter(s => !s.results?.ok).length;
        const m = `${nf} subtest${nf === 1 ? '' : 's'} failed`;
        return {
            ...p,
            details: {
                ...p.details,
                error: Object.assign(new Error(m), {
                    code: 'ERR_TEST_FAILURE',
                    failureType: 'subtestsFailed',
                    cause: m,
                    /* c8 ignore start */
                    failures: results.failures.map(f => f.name || f.tapError),
                    stack: t.options.stack
                        ? (0, stack_1.expandStack)(t.options.stack)
                        : undefined,
                    /* c8 ignore stop */
                }),
            },
        };
    }
    // just report the first failure
    const fe = (0, result_to_error_js_1.resultToError)(t.lists.fail[0] /* c8 ignore start */ ||
        results.failures[0] || {
        ok: false,
        name: 'Unknown test failure',
        diag: {},
    }, 
    /* c8 ignore stop */
    t);
    return {
        ...p,
        details: {
            ...p.details,
            error: Object.assign(new Error(fe.message), {
                cause: fe,
                code: 'ERR_TEST_FAILURE',
                failureType: 'testCodeFailure',
                /* c8 ignore start */
                failures: results.failures.map(f => f.name || f.tapError),
                /* c8 ignore stop */
                stack: (0, stack_1.expandStack)(t.options.stack).trimEnd(),
            }),
        },
    };
};
exports.testResults = testResults;
//# sourceMappingURL=test-results.js.map