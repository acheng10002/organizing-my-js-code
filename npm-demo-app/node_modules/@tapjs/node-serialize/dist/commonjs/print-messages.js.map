{"version":3,"file":"print-messages.js","sourceRoot":"","sources":["../../src/print-messages.ts"],"names":[],"mappings":";;;AAOA,iEAAwD;AACxD,uEAA8D;AAC9D,uDAA+C;AAE/C,MAAM,MAAM,GAAG,CAAC,EAAwB,EAAkB,EAAE,CAC1D,CAAC,CAAC,EAAE,EAAE,OAAO,IAAI,CAAC,EAAE,CAAC,OAAO,CAAC,KAAK,CAAA;AACpC,MAAM,MAAM,GAAG,CAAC,EAAwB,EAAkB,EAAE,CAC1D,CAAC,CAAC,EAAE,EAAE,OAAO,CAAC,KAAK,CAAA;AAEd,MAAM,eAAe,GAAG,CAC7B,GAAQ,EACR,MAA2B,EAC3B,OAAwB,EACxB,QAAmC,EACnC,EAAE;IACF,MAAM,aAAa,GAAG,CAAC,CAAO,EAAE,EAAE;QAChC,4DAA4D;QAC5D,MAAM,IAAI,GAAG,OAAO,CAAC,GAAG,CAAC,CAAC,CAAC,CAAA;QAC3B,IAAI,CAAC,CAAC,MAAM,EAAE;YACZ,MAAM,CAAC,OAAO,CAAC,IAAA,sCAAe,EAAC,CAAC,CAAC,CAAC,CAAA;YAClC,MAAM,CAAC,KAAK,CAAC,IAAA,sCAAe,EAAC,CAAC,CAAC,CAAC,CAAA;SACjC;QACD,IAAI,IAAI,EAAE;YACR,8DAA8D;YAC9D,KAAK,MAAM,CAAC,IAAI,IAAI,EAAE;gBACpB,MAAM,CAAC,OAAO,CAAC,IAAA,sCAAe,EAAC,CAAC,CAAC,CAAC,CAAA;aACnC;YACD,KAAK,MAAM,CAAC,IAAI,IAAI,EAAE;gBACpB,aAAa,CAAC,CAAC,CAAC,CAAA;aACjB;YACD,IAAI,IAAI,CAAC,MAAM,IAAI,CAAC,KAAK,GAAG,EAAE;gBAC5B,MAAM,CAAC,IAAI,CAAC,EAAE,GAAG,IAAA,4CAAkB,EAAC,CAAC,CAAC,EAAE,KAAK,EAAE,IAAI,CAAC,MAAM,EAAE,CAAC,CAAA;aAC9D;SACF;QAED,MAAM,QAAQ,GAAG,IAAA,6BAAW,EAAC,CAAC,EAAE,OAAO,CAAC,CAAA;QACxC,IAAI,MAAM,CAAC,QAAQ,CAAC,EAAE;YACpB,MAAM,CAAC,IAAI,CAAC,QAAoB,CAAC,CAAA;SAClC;aAAM,IAAI,MAAM,CAAC,QAAQ,CAAC,EAAE;YAC3B,MAAM,CAAC,IAAI,CAAC,QAAoB,CAAC,CAAA;SAClC;QAED,qBAAqB;QACrB,MAAM,KAAK,GAAG,QAAQ,CAAC,GAAG,CAAC,CAAC,CAAC,IAAI,EAAE,CAAA;QACnC,oBAAoB;QACpB,KAAK,MAAM,CAAC,IAAI,KAAK,EAAE;YACrB,MAAM,CAAC,UAAU,CAAC,CAAC,CAAC,CAAA;SACrB;IACH,CAAC,CAAA;IACD,OAAO,aAAa,CAAA;AACtB,CAAC,CAAA;AAzCY,QAAA,eAAe,mBAyC3B","sourcesContent":["import { Base, TAP } from '@tapjs/core'\nimport {\n  FailData,\n  PassData,\n  TestStreamSerialize,\n} from '@tapjs/error-serdes'\nimport { TestMap } from './test-map.js'\nimport { testMessageData } from './test-message-data.js'\nimport { testNestedLocation } from './test-nested-location.js'\nimport { testResults } from './test-results.js'\n\nconst isPass = (pf?: PassData | FailData): pf is PassData =>\n  !!pf?.details && !pf.details.error\nconst isFail = (pf?: PassData | FailData): pf is FailData =>\n  !!pf?.details.error\n\nexport const printMessagesFn = (\n  tap: TAP,\n  stream: TestStreamSerialize,\n  subsMap: TestMap<Base[]>,\n  diagsMap: TestMap<DiagnosticData[]>\n) => {\n  const printMessages = (t: Base) => {\n    // enqueue all my subs, then dequeue each one and print them\n    const subs = subsMap.get(t)\n    if (t.parent) {\n      stream.dequeue(testMessageData(t))\n      stream.start(testMessageData(t))\n    }\n    if (subs) {\n      // determine whether a suite or assertion based on subs.length\n      for (const t of subs) {\n        stream.enqueue(testMessageData(t))\n      }\n      for (const t of subs) {\n        printMessages(t)\n      }\n      if (subs.length && t !== tap) {\n        stream.plan({ ...testNestedLocation(t), count: subs.length })\n      }\n    }\n\n    const passFail = testResults(t, subsMap)\n    if (isPass(passFail)) {\n      stream.pass(passFail as PassData)\n    } else if (isFail(passFail)) {\n      stream.fail(passFail as FailData)\n    }\n\n    /* c8 ignore start */\n    const diags = diagsMap.get(t) || []\n    /* c8 ignore stop */\n    for (const d of diags) {\n      stream.diagnostic(d)\n    }\n  }\n  return printMessages\n}\n"]}