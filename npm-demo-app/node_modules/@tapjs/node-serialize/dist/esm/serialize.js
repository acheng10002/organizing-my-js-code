// Serialize the root TAP object, and output a node:test style
// serialized message stream.
import { TestStreamSerialize } from '@tapjs/error-serdes';
import { proc } from '@tapjs/core';
import { commentMethod } from './comment.js';
import { onAddFn } from './on-add.js';
import { printMessagesFn } from './print-messages.js';
import { serializeStdio } from './stdio.js';
import { TestMap } from './test-map.js';
if (!proc) {
    throw new Error('Cannot serialize TAP stream, no process object');
}
const { stdout } = proc;
export const serialize = (tap) => {
    if (tap.registered) {
        throw new Error('Cannot serialize TAP stream, already registered');
    }
    tap.register?.();
    const subsMap = new TestMap();
    const diagsMap = new TestMap([[tap, []]]);
    const stream = new TestStreamSerialize();
    // stream
    //   .pipe(new TestStreamDeserialize())
    //   .on('data', c => stdout.write(format(c)))
    stream.pipe(stdout);
    const comment = commentMethod(stream, diagsMap);
    // unpossible, we already checked on module load
    /* c8 ignore start */
    if (!proc) {
        throw new Error('Cannot serialize TAP stream, no process object');
    }
    /* c8 ignore stop */
    serializeStdio(stream, proc, 'stderr');
    serializeStdio(stream, proc, 'stdout');
    const onAdd = onAddFn(comment, diagsMap, subsMap);
    const printMessages = printMessagesFn(tap, stream, subsMap, diagsMap);
    onAdd(tap);
    tap.on('complete', () => {
        printMessages(tap);
        stream.end();
    });
};
//# sourceMappingURL=serialize.js.map