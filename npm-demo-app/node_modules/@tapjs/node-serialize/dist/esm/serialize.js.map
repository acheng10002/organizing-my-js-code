{"version":3,"file":"serialize.js","sourceRoot":"","sources":["../../src/serialize.ts"],"names":[],"mappings":"AAAA,8DAA8D;AAC9D,6BAA6B;AAG7B,OAAO,EAAE,mBAAmB,EAAE,MAAM,qBAAqB,CAAA;AAEzD,OAAO,EAAE,IAAI,EAAE,MAAM,aAAa,CAAA;AAClC,OAAO,EAAE,aAAa,EAAE,MAAM,cAAc,CAAA;AAC5C,OAAO,EAAE,OAAO,EAAE,MAAM,aAAa,CAAA;AACrC,OAAO,EAAE,eAAe,EAAE,MAAM,qBAAqB,CAAA;AACrD,OAAO,EAAE,cAAc,EAAE,MAAM,YAAY,CAAA;AAC3C,OAAO,EAAE,OAAO,EAAE,MAAM,eAAe,CAAA;AAEvC,IAAI,CAAC,IAAI,EAAE;IACT,MAAM,IAAI,KAAK,CAAC,gDAAgD,CAAC,CAAA;CAClE;AAED,MAAM,EAAE,MAAM,EAAE,GAAG,IAAI,CAAA;AAEvB,MAAM,CAAC,MAAM,SAAS,GAAG,CAAC,GAAQ,EAAQ,EAAE;IAC1C,IAAI,GAAG,CAAC,UAAU,EAAE;QAClB,MAAM,IAAI,KAAK,CAAC,iDAAiD,CAAC,CAAA;KACnE;IACD,GAAG,CAAC,QAAQ,EAAE,EAAE,CAAA;IAEhB,MAAM,OAAO,GAAG,IAAI,OAAO,EAAU,CAAA;IACrC,MAAM,QAAQ,GAAG,IAAI,OAAO,CAAmB,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC,CAAC,CAAA;IAE3D,MAAM,MAAM,GAAG,IAAI,mBAAmB,EAAE,CAAA;IACxC,SAAS;IACT,uCAAuC;IACvC,8CAA8C;IAC9C,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,CAAA;IAEnB,MAAM,OAAO,GAAG,aAAa,CAAC,MAAM,EAAE,QAAQ,CAAC,CAAA;IAE/C,gDAAgD;IAChD,qBAAqB;IACrB,IAAI,CAAC,IAAI,EAAE;QACT,MAAM,IAAI,KAAK,CAAC,gDAAgD,CAAC,CAAA;KAClE;IACD,oBAAoB;IACpB,cAAc,CAAC,MAAM,EAAE,IAAI,EAAE,QAAQ,CAAC,CAAA;IACtC,cAAc,CAAC,MAAM,EAAE,IAAI,EAAE,QAAQ,CAAC,CAAA;IAEtC,MAAM,KAAK,GAAG,OAAO,CAAC,OAAO,EAAE,QAAQ,EAAE,OAAO,CAAC,CAAA;IAEjD,MAAM,aAAa,GAAG,eAAe,CACnC,GAAG,EACH,MAAM,EACN,OAAO,EACP,QAAQ,CACT,CAAA;IAED,KAAK,CAAC,GAAG,CAAC,CAAA;IACV,GAAG,CAAC,EAAE,CAAC,UAAU,EAAE,GAAG,EAAE;QACtB,aAAa,CAAC,GAAG,CAAC,CAAA;QAClB,MAAM,CAAC,GAAG,EAAE,CAAA;IACd,CAAC,CAAC,CAAA;AACJ,CAAC,CAAA","sourcesContent":["// Serialize the root TAP object, and output a node:test style\n// serialized message stream.\n\nimport { Base, TAP } from '@tapjs/core'\nimport { TestStreamSerialize } from '@tapjs/error-serdes'\n\nimport { proc } from '@tapjs/core'\nimport { commentMethod } from './comment.js'\nimport { onAddFn } from './on-add.js'\nimport { printMessagesFn } from './print-messages.js'\nimport { serializeStdio } from './stdio.js'\nimport { TestMap } from './test-map.js'\n\nif (!proc) {\n  throw new Error('Cannot serialize TAP stream, no process object')\n}\n\nconst { stdout } = proc\n\nexport const serialize = (tap: TAP): void => {\n  if (tap.registered) {\n    throw new Error('Cannot serialize TAP stream, already registered')\n  }\n  tap.register?.()\n\n  const subsMap = new TestMap<Base[]>()\n  const diagsMap = new TestMap<DiagnosticData[]>([[tap, []]])\n\n  const stream = new TestStreamSerialize()\n  // stream\n  //   .pipe(new TestStreamDeserialize())\n  //   .on('data', c => stdout.write(format(c)))\n  stream.pipe(stdout)\n\n  const comment = commentMethod(stream, diagsMap)\n\n  // unpossible, we already checked on module load\n  /* c8 ignore start */\n  if (!proc) {\n    throw new Error('Cannot serialize TAP stream, no process object')\n  }\n  /* c8 ignore stop */\n  serializeStdio(stream, proc, 'stderr')\n  serializeStdio(stream, proc, 'stdout')\n\n  const onAdd = onAddFn(comment, diagsMap, subsMap)\n\n  const printMessages = printMessagesFn(\n    tap,\n    stream,\n    subsMap,\n    diagsMap\n  )\n\n  onAdd(tap)\n  tap.on('complete', () => {\n    printMessages(tap)\n    stream.end()\n  })\n}\n"]}